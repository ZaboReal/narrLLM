import { useState } from 'react';
import { useToast } from "@/components/ui/use-toast";
import { cleanTextForGemini } from '@/utils/textProcessing';

interface GeminiResponse {
  narrators: string[];
  transmissions: string[];
}

export const useChainGptParser = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [errorDialog, setErrorDialog] = useState({ open: false, message: '' });
  const [rawResponse, setRawResponse] = useState('');
  const { toast } = useToast();

  const parseWithGemini = async (chainText: string): Promise<GeminiResponse | null> => {
    setIsLoading(true);
    try {
      const cleanedText = cleanTextForGemini(chainText);
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${import.meta.env.VITE_GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `Given this Arabic hadith chain: "${cleanedText}", extract:
              1. The narrators in order
              2. The transmission types between them
              Respond only with a JSON object containing "narrators" (array) and "transmissions" (array).`
            }]
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed (${response.status})`);
      }

      const data = await response.json();
      const responseText = data.candidates[0]?.content?.parts[0]?.text;
      setRawResponse(responseText);

      try {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
          throw new Error('No JSON found in Gemini response');
        }
        const parsedContent = JSON.parse(jsonMatch[0]) as GeminiResponse;
        return parsedContent;
      } catch (parseError) {
        console.error('Failed to parse Gemini response:', responseText);
        throw new Error(`Failed to parse Gemini response: ${parseError.message}`);
      }
    } catch (error) {
      console.error('Parsing error:', error);
      setErrorDialog({
        open: true,
        message: error instanceof Error ? error.message : "An unknown error occurred"
      });
      toast({
        title: "Error Parsing Chain",
        description: "Check error details in the popup dialog",
        variant: "destructive",
      });
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    parseWithGemini,
    isLoading,
    errorDialog,
    setErrorDialog,
    rawResponse
  };
};
